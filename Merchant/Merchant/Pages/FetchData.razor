@page "/fetchdata"

@using Merchant.Data
@inject ItemService ItemService

<h1>Create Bill</h1>

Bill Id <input style="{display: inline}" readonly value=@billId />

@if (items == null)
{
    <p><em>Loading Items</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Add</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Price</td>
                    <td @onclick="@(() => AddItem(item))">+</td>
                </tr>
            }
        </tbody>
    </table>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var itemLine in itemLines)
            {
                <tr>
                    <td>@itemLine.Name</td>
                    <td>@itemLine.Price</td>
                    <td @onclick="@(() => RemoveItemLine(itemLine))">-</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    Item[] items;
    List<ItemLine> itemLines;
    Guid billId;

    protected override async Task OnInitializedAsync()
    {
        billId = Guid.NewGuid();
        itemLines = new List<ItemLine>();
        items = await ItemService.GetItems();
    }

    protected void AddItem(Item item)
    {
        itemLines.Add(ItemLine.From(billId, item));
        StateHasChanged();
    }

    protected void RemoveItemLine(ItemLine itemLine)
    {
        itemLines.Remove(itemLine);
        StateHasChanged();
    }
}
