@page "/createbill"

@using Merchant.Data
@using Merchant.Models
@inject DCIClientService DCIClientService
@inject BillService BillService

<h1>Create Bill</h1>

<p>Bill Id: @billId</p>

@if (tipGuides == null || currencies == null)
{
    <p><em>Loading Items</em></p>
}
else
{
<p>Merchant currency:</p>
<select @onchange="@(e => UpdateCurrency(decimal.Parse(e.Value.ToString())))">
    @foreach (var currency in currencies)
    {
        <option value=@currency.ExchangeRate.ToString()>@currency.Name</option>
    }
</select>

<p>Merchant country:</p>
<select @onchange="@(e => UpdateCountry(e.Value.ToString()))">
    @foreach (var tipGuide in tipGuides)
    {
        <option value=@tipGuide.CountryName.ToString()>@tipGuide.CountryName</option>
    }
</select>
}

<button @onclick="Create">Create Bill</button>

@if (items == null)
{
    <p><em>Loading Items</em></p>
}
else
{
    <div class="grid-container-2">
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th class="item-name">Name</th>
                        <th class="item-price">Price</th>
                        <th class="action-button">Add</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in items)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td class="item-price">@item.Price</td>
                            <td class="action-button" @onclick="@(() => AddItem(item))">+</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th class="item-name">Name</th>
                        <th class="item-price">Price</th>
                        <th class="action-button">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var itemLine in itemLines)
                    {
                        <tr>
                            <td class="item-name">@itemLine.Name</td>
                            <td class="item-price">@itemLine.Price</td>
                            <td class="action-button" @onclick="@(() => RemoveItemLine(itemLine))">-</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    Item[] items;
    List<ItemLine> itemLines;
    Currency[] currencies = Array.Empty<Currency>();
    TipGuide[] tipGuides;
    Guid? billId;

    string merchantCountry;
    decimal exchangeRate;

    protected override async Task OnInitializedAsync()
    {
        itemLines = new List<ItemLine>();
        items = await BillService.GetItems();
        currencies = await DCIClientService.GetCurrencyConversions();
        tipGuides = await DCIClientService.GetTipGuides();
    }

    protected void AddItem(Item item)
    {
        itemLines.Add(ItemLine.From(item));
        StateHasChanged();
    }

    protected void RemoveItemLine(ItemLine itemLine)
    {
        itemLines.Remove(itemLine);
        StateHasChanged();
    }

    protected async Task Create()
    {
        itemLines.ForEach(x => x.MerchantCountry = merchantCountry);
        itemLines.ForEach(x => x.MerchantExchangeRate = exchangeRate);
        billId = await BillService.CreateBill(itemLines);
        StateHasChanged();
    }

    void UpdateCountry(string newMerchantCountry)
    {
        merchantCountry = newMerchantCountry;
        StateHasChanged();
    }

    void UpdateCurrency(decimal newExchangeRate)
    {
        exchangeRate = newExchangeRate;
        StateHasChanged();
    }
}
