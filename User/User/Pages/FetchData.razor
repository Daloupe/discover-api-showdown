@page "/fetchdata"

@using User.Data
@using User.Models
@using System.Threading;
@inject DCIClientService DCIClientService
@inject ItemLineService ItemLineService

User Id
<input style="display: inline; width: 200px;" readonly value=@userId />
Bill Id
<input style="display: inline; width: 200px;" @bind=@billId />
<button @onclick="GetBill">Get Bill</button>

@if (itemLines == null)
{
    <p><em>Loading Items</em></p>
}
else
{
    <div class="grid-container-2">
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th class="item-name">Name</th>
                        <th class="item-price">Price</th>
                        <th class="action-button">Claim</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var itemLine in itemLines.Where(x => !x.IsClaimed))
                    {
                        <tr>
                            <td>@itemLine.Name</td>
                            <td class="item-price">@itemLine.Price</td>
                            <td class="action-button" @onclick="@(() => ClaimItemLine(itemLine))">+</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th class="item-name">Name</th>
                        <th class="item-price">Price</th>
                        <th class="action-button">Unclaim</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var itemLine in itemLines.Where(x => x.IsClaimed))
                    {
                        <tr>
                            <td class="item-name">@itemLine.Name</td>
                            <td class="item-price">@itemLine.Price</td>
                            @if (itemLine.ClaimerId == userId)
                            {
                                <td class="action-button" @onclick="@(() => UnclaimItemLine(itemLine))">-</td>
                            }
                            else
                            {
                                <td class="action-button"></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code
{
    Guid userId;
    string billId { get; set; }
    ItemLine[] itemLines;
    Currencies currencies;
    TipGuide[] TipGuides;

    protected override async Task OnInitializedAsync()
    {
        userId = Guid.NewGuid();
        currencies = await DCIClientService.GetCurrencyConversions();
        TipGuides = await DCIClientService.GetTipGuides();
        itemLines = await ItemLineService.GetItemLines(Guid.Empty);
    }

    protected async Task GetBill()
    {
        if (!string.IsNullOrWhiteSpace(billId))
        {
            itemLines = await ItemLineService.GetItemLines(Guid.Parse(billId));
            StateHasChanged();
        }
    }

    protected async Task ClaimItemLine(ItemLine itemLine)
    {
        itemLines = await ItemLineService.ClaimItemLine(userId, itemLine.ItemId);
        StateHasChanged();
    }

    protected async Task UnclaimItemLine(ItemLine itemLine)
    {
        itemLines = await ItemLineService.UnclaimItemLine(userId, itemLine.ItemId);
        StateHasChanged();
    }
}
